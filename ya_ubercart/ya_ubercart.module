<?php

/**
 * Implements hook_uc_payment_method().
 *
 * @see uc_payment_method_yamoney()
 */
function ya_ubercart_uc_payment_method()
{
    $payment_methods = array();
    $icon_name = (variable_get('yamoney_shop', 0) == 0) ? 'yandex-logo' : 'kassa-logo';
    $icon = theme('image', array(
        'path' => drupal_get_path('module', 'ya_ubercart') . '/images/' . $icon_name . '.png',
        'attributes' => array('class' => array('ya-ubercart-logo')),
    ));

    $display_title = '';
    if (variable_get('yamoney_shop', 0)) {
        $display_title = t('Yandex.Kassa');
    } else if (variable_get('yamoney_p2p', 0)) {
        $display_title = t('Yandex.Money');
    } else if (variable_get('yamoney_billing_enable', 0)) {
        $display_title = t('Yandex.Billing (bank card, e-wallets)');
    }

    $display_title .= '<br/>' . $icon;
    $payment_methods['ya_ubercart'] = array(
        'name' => t('Yandex money'),
        'title' => $display_title,
        'review' => t('Yandex gateway'),
        'desc' => t('Redirect to Yandex to pay by credit card or pay terminals or e-money.'),
        'callback' => 'uc_payment_method_ya_ubercart',
        'redirect' => 'ya_ubercart_form',
        'weight' => 3,
        'checkout' => TRUE,
    );

    return $payment_methods;
}

/**
 * @param array $form
 * @param array $form_state
 * @param $order
 * @return array
 */
function ya_ubercart_form($form, &$form_state, $order)
{
    global $user;

    $transaction = new YAMoneyTransaction();
    $transaction->uid = $user->uid;
    $transaction->amount = $order->order_total;
    $transaction->mail = isset($user->mail) ? $user->mail : $order->primary_email;
    $transaction->order_id = $order->order_id;
    if (!yamoney_transaction_save($transaction)) {
        $error_message = t('Can not save transaction.');

        // show message to the user
        drupal_set_message(t('Payment failed: %message', array('%message' => $error_message)), 'error');

        // log error to watchdog
        watchdog('ya_ubercart', 'Payment failed: %message', array('%message' => $error_message), WATCHDOG_WARNING);

        // redirect to fail page
        $cancel_url = url('yamoney/fail');
        drupal_goto($cancel_url);
    }

    if (variable_get('yamoney_billing_enable')) {
        uc_cart_complete_sale($order);
        uc_cart_empty($order->uid);
        uc_order_update_status($order->order_id, 'payment_received');
    }

    $target_url = yamoney_get_order_submission_url();
    $params = yamoney_get_order_submission_params($transaction);

    $tax = uc_taxes_uc_calculate_tax($order);
    if (module_exists('uc_taxes') && count($tax) && variable_get('yamoney_send_check', false)) {
        $params['receipt'] = getReceiptJson($order, $tax);
    }

    $form = array();
    $form['#action'] = $target_url;
    foreach ($params as $key => $value) {
        if ($key == 'fio') {
            $form[$key] = array(
                '#type' => 'hidden',
                '#value' => $order->data['customer_name'],
            );
        } else {
            $form[$key] = array(
                '#type' => 'hidden',
                '#value' => $value,
            );
        }
    }
    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit order'),
    );
    $form['cms_name'] = array(
        '#type' => 'hidden',
        '#value' => "drupal-ubercart",
    );

    return $form;
}

/**
 * @param $order
 * @param $tax
 * @return string
 */
function getReceiptJson($order, $tax)
{
    require_once dirname(__FILE__) . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'lib' . DIRECTORY_SEPARATOR . 'YandexMoneyReceipt.php';

    $receipt = new YandexMoneyReceipt();
    $receipt->setCustomerContact($order->primary_email);

    if (count($tax)) {
        $tax = current($tax);
    }

    foreach ($order->products as $product) {
        $tax_id = isset($tax->id) ? $tax->id : 0;
        $tax = ($tax_id && variable_get('yamoney_kassa_tax_' . $tax_id) ? variable_get('yamoney_kassa_tax_' . $tax_id) : YandexMoneyReceipt::DEFAULT_TAX_RATE_ID);
        list($amountTax, $suffixes) = uc_taxes_get_included_tax($product, $order);
        $amount = $product->price + $amountTax ? $amountTax : 0;
        $receipt->addItem($product->title, $amount, $product->qty, $tax);
    }

    foreach ($order->line_items as $item) {
        $tax_id = isset($tax->id) ? $tax->id : 0;
        $amount = $item['amount'] * (isset($tax->id) ? (1 + $tax->data['tax_rate']) : 0);
        $tax = ($tax_id && variable_get('yamoney_kassa_tax_' . $tax_id) ? variable_get('yamoney_kassa_tax_' . $tax_id) : YandexMoneyReceipt::DEFAULT_TAX_RATE_ID);

        $receipt->addShipping($item['title'], $amount, $tax);
    }

    return $receipt->normalize($order->order_total)->getJson();
}

/**
 * Implements hook_yamoney_shop_params_alter().
 * @param $params
 */
function ya_ubercart_yamoney_shop_params_alter(&$params)
{
    // Selected payment method
    $params['paymentType'] = (variable_get('yamoney_paymode') == 'shop') ? $_SESSION['pay_method'] : '';
    $params['shop-desc'] = t('Payments for order No') . $params['order_id'];
}

/**
 * Implements hook_yamoney_quick_params_alter().
 * @param $params
 */
function ya_ubercart_yamoney_quick_params_alter(&$params)
{
    // Selected payment method
    $params['paymentType'] = @$_SESSION['pay_method'];
}

/**
 * @param $op
 * @param $order
 * @param null $form
 * @param null $form_state
 * @return array|null
 */
function uc_payment_method_ya_ubercart($op, &$order, $form = null, &$form_state = null)
{
    switch ($op) {
        case 'cart-details':
            $build = array();
            $disabled = FALSE;
            $methods = yamoney_get_enabled_payment_methods();
            if (count($methods) === 1) {
                $disabled = TRUE;
            }
            if (variable_get('yamoney_paymode') == 'shop' && variable_get('ya_payments_select', 1)) {
                $build['pay_method'] = array(
                    '#type' => 'select',
                    '#title' => t('Select your payment type:'),
                    '#default_value' => isset($_SESSION['pay_method']) ? $_SESSION['pay_method'] : variable_get('yamoney_default_payment_method', YAMONEY_DEFAULT_PAYMENT_METHOD),
                    '#options' => $methods,
                    '#disabled' => $disabled,
                );
            }
            unset($_SESSION['pay_method']);
            if (variable_get('yamoney_billing_enable', 0)) {
                $form = array();
                $form['customer_name'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Payer\'s full name'),
                    '#required' => true,
                );

                return $form;
            } else {
                return $build;
            }

        case 'cart-process':
            if (isset($form_state['values']['panes']['payment']['details']['pay_method'])) {
                $_SESSION['pay_method'] = $form_state['values']['panes']['payment']['details']['pay_method'];
            }

            if (isset($form_state['values']['panes']['payment']['details']['customer_name'])) {
                $customerName = $form_state['values']['panes']['payment']['details']['customer_name'];
                if ($customerName
                    && !preg_match('/^([а-яА-Яa-zA-ZыЫчЧёЁ]+)\s+([а-яА-Яa-zA-ZыЫчЧёЁ]+)\s+([а-яА-Яa-zA-ZыЫчЧёЁ]+$)/i', $customerName, $matches)
                ) {
                    form_set_error('customer_name', 'Ф.И.О. плательщика введено не верно.');
                }
            }
            return;
        case 'settings':
            $form['yauc_settings'] = array(
                '#type' => 'markup',
                '#value' => t('You shop ID. If you have any shops in you yandex account'),
            );
            return $form;

        case 'order-save':
            if (isset($_POST['panes']['payment']['details']['customer_name'])) {
                $customerName = $_POST['panes']['payment']['details']['customer_name'];
                $order->data['customer_name'] = $customerName;
                db_update('uc_orders')
                    ->fields(array('data' => serialize($order->data)))
                    ->condition('order_id', $order->order_id)
                    ->execute();
            }
            break;
    }
}

/**
 * Process successful payment to update Ubercart order.
 * Implements hook_yamoney_process_payment_alter().
 * @param array $payment
 */
function ya_ubercart_yamoney_process_payment_alter(&$payment)
{
    /** @var YAMoneyTransaction $transaction */
    $transaction = $payment['transaction'];
    $order = uc_order_load($transaction->order_id);
    if ($order) {
        //print_r($order);
        uc_cart_complete_sale($order);
        uc_cart_empty($order->uid);
        uc_order_update_status($order->order_id, 'payment_received');
        $payment['success'] = TRUE;
    } else {
        $payment['success'] = FALSE;
        $payment['error'] = 'Can not find order with id ' . $transaction->order_id;
    }
}
